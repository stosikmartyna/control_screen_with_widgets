{"version":3,"sources":["utils/constants/colors.ts","components/LampIntensivityBars/LampIntensivityBars.styles.ts","components/LampIntensivityBars/LampIntensivityBars.tsx","components/LampIntensivityControls/LampIntensivityControls.styles.ts","components/LampIntensivityControls/LampIntensivityControls.tsx","components/BatteryTime/BatteryTime.styles.ts","components/BatteryTime/BatteryTime.tsx","components/LightModeSwitches/LightModeSwitches.styles.ts","components/LightModeSwitches/LightModeSwitches.tsx","components/LightWidget/LightWidget.styles.ts","api/api.ts","hooks/useLightSettings.ts","utils/mappers.ts","components/LightWidget/LightWidget.tsx","components/MainView/MainView.styles.ts","components/MainView/MainView.tsx","App.tsx","index.tsx"],"names":["colors","Wrapper","styled","div","CompleteBar","UncompleteBar","LampIntensivityBars","lampIntensivity","AddButton","Button","RemoveButton","BoxWithValue","LampIntensivityControls","changeIntensivity","variant","onClick","Icon","img","Text","span","BatteryTime","value","hours","Math","floor","minutes","src","LightModeSwitches","lighting","switchLightMode","isNightVision","isDuskTillDown","isFlashing","Switch","checked","onChange","WidgetHeaderWrapper","ControlPanelWrapper","LightModeWrapper","getLightSettings","a","axios","get","data","putLightSettings","name","values","put","useLightSettings","useState","lightSettings","setLightSettings","getData","useCallback","response","mappedResponse","map","setting","lamp_intensivity","is_night_vision","is_dusk_till_down","is_flashing","batteryTimeLeft","battery_time_left","console","warn","updateLightSettings","LightWidget","initialValues","setValues","isInitialMount","useRef","lightName","replace","useEffect","current","mode","lampIntensivities","currentIntensivityIndex","indexOf","updatedValue","Container","MainView","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ede215c4.chunk.js","sourcesContent":["export const colors = {\r\n    mainBackgroundBlue: '#02152C',\r\n    widgetBackgroundBlue: '#102949',\r\n    completeBarBlue: '#094E95',\r\n    uncompleteBarBlue: '#B0B7C4',\r\n    lightBlue: '#CACFD9',\r\n    lightBlueHover: '#B0B7C4',\r\n    batteryTimeBlue: '#1B3C67',\r\n    white: '#FFFFFF',\r\n}","import styled from 'styled-components';\r\nimport { colors } from '../../utils/constants/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 70%;\r\n`;\r\n\r\nexport const CompleteBar = styled.div`\r\n    background-color: ${colors.completeBarBlue};\r\n    border-radius: 4px;\r\n    height: 6px;\r\n    width: 40px;\r\n`;\r\n\r\nexport const UncompleteBar = styled(CompleteBar)`\r\n    background-color: ${colors.uncompleteBarBlue};\r\n`;","import React from 'react';\r\nimport { Wrapper, UncompleteBar, CompleteBar } from './LampIntensivityBars.styles';\r\n\r\ninterface LampIntensivityBarsProps {\r\n    lampIntensivity: number;\r\n}\r\n\r\nexport const LampIntensivityBars: React.FC<LampIntensivityBarsProps> = ({ lampIntensivity }) => {\r\n    const renderBars = () => {\r\n        if (lampIntensivity === 0) {\r\n            return (\r\n                <>\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                </>\r\n            )\r\n        } else if (lampIntensivity === 1) {\r\n            return (\r\n                <>\r\n                    <CompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                </>\r\n            )\r\n        } else if (lampIntensivity === 3) {\r\n            return (\r\n                <>\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                </>\r\n            )\r\n        } else if (lampIntensivity === 10) {\r\n            return (\r\n                <>\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <UncompleteBar />\r\n                    <UncompleteBar />\r\n                </>\r\n            )\r\n        } else if (lampIntensivity === 30) {\r\n            return (\r\n                <>\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <UncompleteBar />\r\n                </>\r\n            )\r\n        } else if (lampIntensivity === 100) {\r\n            return (\r\n                <>\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                    <CompleteBar />\r\n                </>\r\n            )\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            {renderBars()}\r\n        </Wrapper>\r\n    );\r\n};","import styled from 'styled-components';\r\nimport { Button } from '@mui/material';\r\nimport { colors } from '../../utils/constants/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    width: 20%;\r\n`;\r\n\r\nexport const AddButton = styled(Button)`\r\n    height: 50px;\r\n\r\n    && {\r\n        font-size: 3rem;\r\n    }\r\n`;\r\n\r\nexport const RemoveButton = styled(AddButton)`\r\n    && {\r\n        background-color: ${colors.lightBlue};\r\n        color: ${colors.white};\r\n        padding-bottom: 10px;\r\n\r\n        &:hover {\r\n            background-color: ${colors.lightBlueHover};\r\n        }\r\n    }\r\n`;\r\n\r\nexport const BoxWithValue = styled.div`\r\n    align-items: center;\r\n    background-color: ${colors.widgetBackgroundBlue};\r\n    border: 1px solid ${colors.white};\r\n    border-radius: 4px;\r\n    color: ${colors.white};\r\n    display: flex;\r\n    font-size: 1.5rem;\r\n    height: 50px;\r\n    justify-content: center;\r\n`;","import React from 'react';\r\nimport {\r\n    Wrapper,\r\n    AddButton,\r\n    BoxWithValue,\r\n    RemoveButton\r\n} from './LampIntensivityControls.styles';\r\n\r\ninterface LampIntensivityControlsProps {\r\n    changeIntensivity: (mode: 'increase' | 'decrease') => void;\r\n    lampIntensivity: number;\r\n}\r\n\r\nexport const LampIntensivityControls: React.FC<LampIntensivityControlsProps> = ({ changeIntensivity, lampIntensivity }) => {\r\n    const increase = () => {\r\n        changeIntensivity('increase')\r\n    }\r\n\r\n    const decrease = () => {\r\n        changeIntensivity('decrease')\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            <AddButton variant={'contained'} onClick={increase}>+</AddButton>\r\n            <BoxWithValue>{lampIntensivity}%</BoxWithValue>\r\n            <RemoveButton onClick={decrease}>-</RemoveButton>\r\n        </Wrapper>\r\n    );\r\n};","import styled from 'styled-components';\r\nimport { colors } from '../../utils/constants/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n    align-items: center;\r\n    background-color: ${colors.batteryTimeBlue};\r\n    border-radius: 4px;\r\n    color: ${colors.white};\r\n    display: flex;\r\n    margin-bottom: 10px;\r\n    padding: 10px 5px;\r\n`;\r\n\r\nexport const Icon = styled.img`\r\n    margin-right: 5px;\r\n    width: 20px;\r\n`;\r\n\r\nexport const Text = styled.span``;","import React from 'react';\r\nimport { Wrapper, Icon, Text } from './BatteryTime.styles';\r\n\r\ninterface BatteryTimeProps {\r\n    value: number\r\n}\r\n\r\nexport const BatteryTime: React.FC<BatteryTimeProps> = ({ value }) => {\r\n    const hours = Math.floor(value / 60);\r\n    const minutes = value % 60;\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Icon src={'./images/battery.png'}/>\r\n            <Text>\r\n                Time left: {hours}h {minutes}min\r\n            </Text>\r\n        </Wrapper>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\nimport { colors } from '../../utils/constants/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n    align-items: center;\r\n    color: ${colors.white};\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const Text = styled.span``;","import React from 'react';\r\nimport { Wrapper, Text } from './LightModeSwitches.styles';\r\nimport { Switch } from '@mui/material';\r\n\r\ninterface LightModeSwitchesProps {\r\n    lighting: {\r\n        lampIntensivity: number;\r\n        isNightVision: boolean;\r\n        isDuskTillDown: boolean;\r\n        isFlashing: boolean;\r\n    }\r\n    switchLightMode: (mode: 'isNightVision' | 'isDuskTillDown' | 'isFlashing') => void;\r\n}\r\n\r\nexport const LightModeSwitches: React.FC<LightModeSwitchesProps> = ({ lighting, switchLightMode }) => {    \r\n    const {isNightVision, isDuskTillDown, isFlashing } = lighting;\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <Text>Night Vision</Text>\r\n                <Switch checked={isNightVision} onChange={() => switchLightMode('isNightVision')} />\r\n            </Wrapper>\r\n            <Wrapper>\r\n                <Text>Dusk Till Down</Text>\r\n                <Switch checked={isDuskTillDown} onChange={() => switchLightMode('isDuskTillDown')} />\r\n            </Wrapper>\r\n            <Wrapper>\r\n                <Text>Flashing</Text>\r\n                <Switch checked={isFlashing} onChange={() => switchLightMode('isFlashing')} />\r\n            </Wrapper>\r\n        </>\r\n    );\r\n};","import styled from 'styled-components';\r\nimport { colors } from '../../utils/constants/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n    background-color: ${colors.widgetBackgroundBlue};\r\n    border-radius: 4px;\r\n    padding: 10px 10px;\r\n    min-width: 250px;\r\n`;\r\n\r\nexport const WidgetHeaderWrapper = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const ControlPanelWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const LightModeWrapper = styled.div`\r\n    width: 75%;\r\n`;\r\n\r\nexport const Text = styled.span`\r\n    color: ${colors.white};\r\n    margin-left: 5px;\r\n    text-transform: uppercase;\r\n`;","import axios from 'axios';\r\nimport { LightSettings } from '../utils/types';\r\nimport { LightSettingsDTO } from './types';\r\n\r\nexport const getLightSettings = async () => {\r\n    const {data} = await axios.get<LightSettingsDTO[]>('lightSettings.json');\r\n    return data;\r\n}\r\n\r\nexport const putLightSettings = async (name: string, values: LightSettings) => {\r\n    await axios.put(`/light/${name}`, values);\r\n}","import { useState, useCallback } from 'react';\r\nimport { getLightSettings, putLightSettings } from '../api/api';\r\nimport { mapLightSettingsDTO } from '../utils/mappers';\r\nimport { LightSettings } from '../utils/types';\r\n\r\nexport const useLightSettings = () => {\r\n    const [lightSettings, setLightSettings] = useState<LightSettings[]>();\r\n\r\n    const getData = useCallback(async() => {\r\n        try {\r\n            const response = await getLightSettings();\r\n            const mappedResponse = mapLightSettingsDTO(response);\r\n            setLightSettings(mappedResponse);\r\n        } catch (error) {\r\n            console.warn(error);\r\n        }\r\n    }, []);\r\n\r\n    const updateLightSettings = useCallback(async(name: string, values: LightSettings) => {\r\n        try {\r\n            await putLightSettings(name, values);\r\n        } catch (error) {\r\n            console.warn(error);\r\n        }\r\n    }, []); \r\n\r\n    return {\r\n        lightSettings,\r\n        getData,\r\n        updateLightSettings\r\n    }\r\n}","import { LightSettingsDTO } from '../api/types';\r\nimport { LightSettings } from './types';\r\n\r\nexport const mapLightSettingsDTO = (data: LightSettingsDTO[]): LightSettings[] => {\r\n    return data.map(setting => ({\r\n        name: setting.name,\r\n        lampIntensivity: setting.lamp_intensivity,\r\n        isNightVision: setting.is_night_vision,\r\n        isDuskTillDown: setting.is_dusk_till_down,\r\n        isFlashing: setting.is_flashing,\r\n        batteryTimeLeft: setting.battery_time_left,\r\n    }))\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport { LampIntensivityBars } from '../LampIntensivityBars/LampIntensivityBars';\r\nimport { LampIntensivityControls } from '../LampIntensivityControls/LampIntensivityControls';\r\nimport { BatteryTime } from '../BatteryTime/BatteryTime';\r\nimport { LightModeSwitches } from '../LightModeSwitches/LightModeSwitches';\r\nimport { Wrapper, ControlPanelWrapper, LightModeWrapper, Text, WidgetHeaderWrapper } from './LightWidget.styles';\r\nimport { LampIntensivity, LightSettings } from '../../utils/types';\r\nimport { useLightSettings } from '../../hooks/useLightSettings';\r\n\r\ninterface LightWidgetProps {\r\n    initialValues: LightSettings;\r\n}\r\n\r\nexport const LightWidget: React.FC<LightWidgetProps> = ({ initialValues }) => {\r\n    const [values, setValues] = useState<LightSettings>(initialValues);\r\n    const {updateLightSettings} = useLightSettings();\r\n\r\n    const isInitialMount = useRef(true);\r\n\r\n    const lightName = initialValues.name.replace('_', ' ');\r\n\r\n    const handleLampIntensivity = (mode: 'increase' | 'decrease') => {\r\n        const lampIntensivities: LampIntensivity[] = [0, 1, 3, 10, 30, 100];\r\n        const currentIntensivityIndex = lampIntensivities.indexOf(values.lampIntensivity);\r\n\r\n        if (mode === 'increase' && values.lampIntensivity !== 100) {\r\n            const updatedValue = lampIntensivities[currentIntensivityIndex + 1];\r\n            setValues({...values, lampIntensivity: updatedValue})\r\n        } else if (mode === 'decrease' && values.lampIntensivity !== 0) {\r\n            const updatedValue = lampIntensivities[currentIntensivityIndex - 1];\r\n            setValues({...values, lampIntensivity: updatedValue})\r\n        }\r\n    }\r\n\r\n    const switchLightMode = (mode: 'isNightVision' | 'isDuskTillDown' | 'isFlashing') => {\r\n        if (mode === 'isNightVision') {\r\n            setValues({...values, isNightVision: !values.isNightVision});\r\n        } else if (mode === 'isDuskTillDown') {\r\n            setValues({...values, isDuskTillDown: !values.isDuskTillDown});\r\n        } else if (mode === 'isFlashing') {\r\n            setValues({...values, isFlashing: !values.isFlashing});\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n        } else {\r\n            updateLightSettings(initialValues.name, values);\r\n        }\r\n    }, [initialValues.name, values, updateLightSettings]);\r\n\r\n    return (\r\n        <Wrapper>\r\n            <WidgetHeaderWrapper>\r\n                <Text>{lightName}</Text>\r\n                <LampIntensivityBars lampIntensivity={values.lampIntensivity} />\r\n            </WidgetHeaderWrapper>\r\n            <ControlPanelWrapper>\r\n                <LampIntensivityControls \r\n                    changeIntensivity={handleLampIntensivity}\r\n                    lampIntensivity={values.lampIntensivity}\r\n                />\r\n                <LightModeWrapper>\r\n                    <BatteryTime value={values.batteryTimeLeft} />\r\n                    <LightModeSwitches\r\n                        lighting={values}\r\n                        switchLightMode={switchLightMode}\r\n                    />\r\n                </LightModeWrapper>\r\n            </ControlPanelWrapper>\r\n        </Wrapper>\r\n    );\r\n};","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    align-items: center;\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    padding: 10px;\r\n\r\n    @media(max-width: 1200px){\r\n        grid-template-columns: repeat(3, 1fr);\r\n    }\r\n\r\n    @media(max-width: 1024px){\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n\r\n    @media(max-width: 769px){\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`;","import React, { useEffect } from 'react';\r\nimport { LightWidget } from '../LightWidget/LightWidget';\r\nimport { Container } from './MainView.styles';\r\nimport { useLightSettings } from '../../hooks/useLightSettings';\r\n\r\nexport const MainView: React.FC = () => {\r\n    const {lightSettings, getData} = useLightSettings();\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, [getData]);\r\n\r\n    return (\r\n        <Container>\r\n            {lightSettings?.map((setting) => {\r\n                return (\r\n                    <LightWidget key={setting.name} initialValues={setting} />\r\n                )\r\n            })}\r\n        </Container>\r\n    );\r\n};\r\n","import React from 'react';\nimport { MainView } from './components/MainView/MainView';\n\nexport const App: React.FC = () => {\n  return (\n    <MainView />\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}